### Easy to Medium (10 Questions)

--1. Find the number of stores in each country.

select country, count(store_id) as total_stores from stores
group by country;

select * from sales;
select * from products;
select * from category;
select * from stores;
select * from warranty;


--2. Calculate the total number of 
--units sold by each store.

select stores.store_id,stores.store_name,
count(sales.quantity) from stores
join sales on sales.store_id = stores.store_id
group by 1,2;


--3. Identify how many sales occurred in December 2023.

select  count(*) as total_sales from sales
where sale_date between '2023-12-01' and '2023-12-31'

--4. Determine how many stores have never had a warranty claim filed.
select * from stores;
select country,count(city) as total_city from stores
--where country='India'
group by 1;

select * from warranty;

5. Calculate the percentage of warranty claims marked as "Warranty Void".
6. Identify which store had the highest total units sold in the last year.
--7. Count the number of unique products sold in the 

select * from products 
where extract(month from launch_date) =10;

select count(product_name) as total_product  from products
where extract(year from launch_date) =2021 ;
--8. Find the average price of products in each category.
select * from products;
select * from category;

select category_id,product_name,round(avg(price)) as average_price_of_products
from products group by 1,2 order by 1;

--9. How many warranty claims were filed in 2020?
select * from warranty;
select count(claim_id) as total_warranty_claims from warranty
where extract(year from claim_date) = 2020 and repair_status= 'Paid';


--10. For each store, identify the best-selling day based on highest quantity sold.
select * from stores;
select * from sales;

with daily_Sales as (
	select 
	 stores.store_name as Store_Name, 
	 to_char(sales.sale_date,'Day') as sale_day, 
	 sum(sales.quantity) as highest_quantity
	 from stores join sales on stores.store_id=sales.store_id
	 group by 1,2
	 --order by 1;
  ),
  ranked_Sales as (
    select 
	  Store_Name,
	  sale_day ,
	  highest_quantity,
	  rank() 
	     over(partition by Store_Name 
			  order by highest_quantity DESC 
			 )  as rank
	  from daily_Sales
  )


select 
  store_name,
  sale_day as best_selling_day,
  highest_quantity
  from ranked_Sales
  where rank=1
  order by 1;

--Medium to Hard (5 Questions)
--1.Identify the least selling product in each country for each year based on total units sold.
select * from products;
select * from stores;
select * from sales;
select * from category;

with yearly_sales as(
	 select 
	 stores.country as country,extract(year from products.launch_date) as Year, 
	 min(sales.quantity) as total_soled
	 from products 
	 join sales on products.product_id = sales.product_id
	 join stores on products.store_id= stores.store_id
	 group by 1,2
 ),
 ranked_sales as(
      select 
	    country as Country_name,
	    Year,
	    total_Soled,
	    rank() over (partition by Year order by total_Soled desc  ) as rank
	    from yearly_sales
   )
  select  
     Country_name,
	 year,
	 total_Soled
	 from ranked_sales
	 where rank = 1
	 order by 2
	 
	 

	 
--2.Calculate how many warranty claims were filed within 180 days of a product sale.

select * from warranty;
SELECT COUNT(*) AS total_warranty_claims
FROM warranty 
WHERE claim_date <= current_date - INTERVAL '180 days' and repair_status='Paid';

--3.Determine how many warranty claims were filed for products launched in the last two years.

SELECT COUNT(*) AS total_warranty_claims
FROM warranty 
WHERE claim_date <= current_date - INTERVAL '2 years' and repair_status='Paid';

--4.List the months in the last three years where sales exceeded 5,000 units in the USA.

select * from sales where country='USA';
select * from stores join sales on stores.store_id= sales.store_id;

select to_char(sales.sale_date,'mon') as month,sum(sales.quantity) as total_sales
from stores join sales on stores.store_id= sales.store_id
where stores.country = 'USA' 
group by 1
having sum(sales.quantity) > 500
order by 1; 

--5.Identify the product category with the most warranty claims filed in the last two years.
select * from warranty where repair_status='Paid';
select * from products;
select * from category;
select * from sales;
select * from stores;
--need to alter category table add warranty_id 

				--Complex (5 Questions)
				
--1.Determine the percentage chance of receiving warranty claims after each purchase for each country.

--2.Analyze the year-by-year growth ratio for each store.
select * from stores join sales on stores.store_id= sales.store_id

  WITH yearly_sales AS (
    SELECT 
        st.store_id,
        st.store_name,
        EXTRACT(YEAR FROM sa.sale_date) AS year,
        SUM(sa.quantity) AS total_sales
    FROM stores st
    JOIN sales sa ON st.store_id = sa.store_id
    GROUP BY st.store_id, st.store_name, EXTRACT(YEAR FROM sa.sale_date)
)
SELECT 
    store_id,
    store_name,
    year,
    total_sales,
    LAG(total_sales) OVER (PARTITION BY store_id ORDER BY year) AS prev_year_sales,
    ROUND(
        ( (total_sales::NUMERIC - LAG(total_sales) OVER (PARTITION BY store_id ORDER BY year)) 
          / NULLIF(LAG(total_sales) OVER (PARTITION BY store_id ORDER BY year), 0) ) * 100, 2
    ) AS growth_percentage
FROM yearly_sales
ORDER BY store_id, year;

--3.Calculate the correlation between product price and warranty claims for products sold in the last five years, segmented by price range.


select products.product_name,products.price,warranty.repair_status,
COUNT(warranty.claim_id) AS total_claims
from stores join sales on stores.store_id= sales.store_id
join warranty on sales.sale_id = warranty.sale_id 
join products on stores.store_id= products.store_id
where warranty.repair_status='Paid' and warranty.claim_date >= current_date - interval '5 years'
group by 1,2,3


WITH product_claims AS (
    SELECT 
        products.product_id,
        products.product_name,
        products.price,
        COUNT(warranty.claim_id) AS total_claims
    FROM sales 
    JOIN warranty  ON sales.sale_id = warranty.sale_id
    JOIN products  ON sales.product_id = products.product_id
    WHERE warranty.claim_date >= current_date - INTERVAL '5 years' and warranty.repair_status='Paid'
    GROUP BY products.product_id, products.product_name, products.price
),
segmented AS (
    SELECT 
        product_id,
        product_name,
        price,
        total_claims,
        CASE 
            WHEN price < 500 THEN 'Low'
            WHEN price BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'High'
        END AS price_range
    FROM product_claims
)
SELECT 
    price_range,
    corr(price, total_claims) AS correlation_price_claims,
    AVG(price) AS avg_price,
    AVG(total_claims) AS avg_claims
FROM segmented
GROUP BY price_range;


--4.Identify the store with the highest percentage of "Paid Repaired" claims relative to total claims filed.
select * from warranty where repair_status='Paid';
select * from products;
select * from category;
select * from sales;
select * from stores;

SELECT 
    st.store_name,
    COUNT(w.claim_id) AS total_claims_filed,
    SUM(CASE WHEN w.repair_status = 'Paid' THEN 1 ELSE 0 END) AS total_claims_paid,
	round((SUM(CASE WHEN w.repair_status = 'Paid' THEN 1 ELSE 0 END)::numeric /count(w.claim_id)) * 100)  as  percentage_of_warranty
FROM stores st
JOIN sales s  ON st.store_id = s.store_id
JOIN products p ON s.product_id = p.product_id
JOIN warranty w ON s.sale_id = w.sale_id
WHERE w.claim_date >= CURRENT_DATE - INTERVAL '5 years'
GROUP BY st.store_name
ORDER BY st.store_name;

--5.Write a query to calculate the monthly running total of sales for each store over the past four years and compare trends during this period.  
select * from warranty where repair_status='Paid';
select * from products;
select * from category;
select * from sales;

SELECT 
    s.store_name,
    TO_CHAR(DATE_TRUNC('month', sa.sale_date), 'YYYY-MM') AS month,
    SUM(sa.quantity) AS monthly_sales,
    SUM(SUM(sa.quantity)) OVER (
        PARTITION BY s.store_name 
        ORDER BY DATE_TRUNC('month', sa.sale_date)
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS running_total
FROM stores s
JOIN sales sa ON sa.store_id = s.store_id
WHERE sa.sale_date >= CURRENT_DATE - INTERVAL '4 years'
GROUP BY s.store_name, DATE_TRUNC('month', sa.sale_date)
ORDER BY s.store_name, DATE_TRUNC('month', sa.sale_date);

